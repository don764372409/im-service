// Generated by the protocol buffer compiler.  DO NOT EDIT!
// clang-format off
// source: service.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#if GOOGLE_PROTOBUF_OBJC_VERSION < 30007
#error This file was generated by a newer version of protoc which is incompatible with your Protocol Buffer library sources.
#endif
#if 30007 < GOOGLE_PROTOBUF_OBJC_MIN_SUPPORTED_VERSION
#error This file was generated by an older version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

#import <stdatomic.h>

#import "Service.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#pragma mark - Objective-C Class declarations
// Forward declarations of Objective-C classes that we can use as
// static values in struct initializers.
// We don't use [Foo class] because it is not a static value.
GPBObjCClassDeclaration(WorldConfigReq);
GPBObjCClassDeclaration(WorldRegisterReq);
GPBObjCClassDeclaration(WorldResultDTOResp);

#pragma mark - WorldServiceRoot

@implementation WorldServiceRoot

// No extensions in the file and no imports or none of the imports (direct or
// indirect) defined extensions, so no need to generate +extensionRegistry.

@end

static GPBFileDescription WorldServiceRoot_FileDescription = {
  .package = NULL,
  .prefix = "World",
  .syntax = GPBFileSyntaxProto3
};

#pragma mark - Enum WorldResultDTOCode

GPBEnumDescriptor *WorldResultDTOCode_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static const char *valueNames =
        "Default\000Success\000Error\000ToInputPwd2\000";
    static const int32_t values[] = {
        WorldResultDTOCode_Default,
        WorldResultDTOCode_Success,
        WorldResultDTOCode_Error,
        WorldResultDTOCode_ToInputPwd2,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(WorldResultDTOCode)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:WorldResultDTOCode_IsValidValue
                                            flags:GPBEnumDescriptorInitializationFlag_None];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL WorldResultDTOCode_IsValidValue(int32_t value__) {
  switch (value__) {
    case WorldResultDTOCode_Default:
    case WorldResultDTOCode_Success:
    case WorldResultDTOCode_Error:
    case WorldResultDTOCode_ToInputPwd2:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum WorldConfigReq_LogSwitch

GPBEnumDescriptor *WorldConfigReq_LogSwitch_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static const char *valueNames =
        "LogSwitchUnknown\000Close\000Console\000File\000Cons"
        "oleFile\000";
    static const int32_t values[] = {
        WorldConfigReq_LogSwitch_LogSwitchUnknown,
        WorldConfigReq_LogSwitch_Close,
        WorldConfigReq_LogSwitch_Console,
        WorldConfigReq_LogSwitch_File,
        WorldConfigReq_LogSwitch_ConsoleFile,
    };
    static const char *extraTextFormatInfo = "\001\000\nf\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(WorldConfigReq_LogSwitch)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:WorldConfigReq_LogSwitch_IsValidValue
                                            flags:GPBEnumDescriptorInitializationFlag_None
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL WorldConfigReq_LogSwitch_IsValidValue(int32_t value__) {
  switch (value__) {
    case WorldConfigReq_LogSwitch_LogSwitchUnknown:
    case WorldConfigReq_LogSwitch_Close:
    case WorldConfigReq_LogSwitch_Console:
    case WorldConfigReq_LogSwitch_File:
    case WorldConfigReq_LogSwitch_ConsoleFile:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum WorldConfigReq_DeviceType

GPBEnumDescriptor *WorldConfigReq_DeviceType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static const char *valueNames =
        "Unknown\000Pc\000Android\000Ios\000H5\000";
    static const int32_t values[] = {
        WorldConfigReq_DeviceType_Unknown,
        WorldConfigReq_DeviceType_Pc,
        WorldConfigReq_DeviceType_Android,
        WorldConfigReq_DeviceType_Ios,
        WorldConfigReq_DeviceType_H5,
    };
    static const char *extraTextFormatInfo = "\002\000\007\000\002\007\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(WorldConfigReq_DeviceType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:WorldConfigReq_DeviceType_IsValidValue
                                            flags:GPBEnumDescriptorInitializationFlag_None
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL WorldConfigReq_DeviceType_IsValidValue(int32_t value__) {
  switch (value__) {
    case WorldConfigReq_DeviceType_Unknown:
    case WorldConfigReq_DeviceType_Pc:
    case WorldConfigReq_DeviceType_Android:
    case WorldConfigReq_DeviceType_Ios:
    case WorldConfigReq_DeviceType_H5:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - WorldRegisterReq

@implementation WorldRegisterReq

@dynamic username;
@dynamic password;

typedef struct WorldRegisterReq__storage_ {
  uint32_t _has_storage_[1];
  NSString *username;
  NSString *password;
} WorldRegisterReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "username",
        .dataTypeSpecific.clazz = Nil,
        .number = WorldRegisterReq_FieldNumber_Username,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(WorldRegisterReq__storage_, username),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "password",
        .dataTypeSpecific.clazz = Nil,
        .number = WorldRegisterReq_FieldNumber_Password,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(WorldRegisterReq__storage_, password),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(WorldRegisterReq)
                                   messageName:@"RegisterReq"
                               fileDescription:&WorldServiceRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(WorldRegisterReq__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - WorldConfigReq

@implementation WorldConfigReq

@dynamic baseDir;
@dynamic deviceType;
@dynamic logSwitch;
@dynamic apiHost;
@dynamic wsHost;

typedef struct WorldConfigReq__storage_ {
  uint32_t _has_storage_[1];
  WorldConfigReq_DeviceType deviceType;
  WorldConfigReq_LogSwitch logSwitch;
  NSString *baseDir;
  NSString *apiHost;
  NSString *wsHost;
} WorldConfigReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseDir",
        .dataTypeSpecific.clazz = Nil,
        .number = WorldConfigReq_FieldNumber_BaseDir,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(WorldConfigReq__storage_, baseDir),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "deviceType",
        .dataTypeSpecific.enumDescFunc = WorldConfigReq_DeviceType_EnumDescriptor,
        .number = WorldConfigReq_FieldNumber_DeviceType,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(WorldConfigReq__storage_, deviceType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "logSwitch",
        .dataTypeSpecific.enumDescFunc = WorldConfigReq_LogSwitch_EnumDescriptor,
        .number = WorldConfigReq_FieldNumber_LogSwitch,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(WorldConfigReq__storage_, logSwitch),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "apiHost",
        .dataTypeSpecific.clazz = Nil,
        .number = WorldConfigReq_FieldNumber_ApiHost,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(WorldConfigReq__storage_, apiHost),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "wsHost",
        .dataTypeSpecific.clazz = Nil,
        .number = WorldConfigReq_FieldNumber_WsHost,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(WorldConfigReq__storage_, wsHost),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(WorldConfigReq)
                                   messageName:@"ConfigReq"
                               fileDescription:&WorldServiceRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(WorldConfigReq__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
      static const char *extraTextFormatInfo =
        "\005\001\007\000\002\n\000\003\t\000\004G\000\005F\000";
      [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
    #endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t WorldConfigReq_DeviceType_RawValue(WorldConfigReq *message) {
  GPBDescriptor *descriptor = [WorldConfigReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:WorldConfigReq_FieldNumber_DeviceType];
  return GPBGetMessageRawEnumField(message, field);
}

void SetWorldConfigReq_DeviceType_RawValue(WorldConfigReq *message, int32_t value) {
  GPBDescriptor *descriptor = [WorldConfigReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:WorldConfigReq_FieldNumber_DeviceType];
  GPBSetMessageRawEnumField(message, field, value);
}

int32_t WorldConfigReq_LogSwitch_RawValue(WorldConfigReq *message) {
  GPBDescriptor *descriptor = [WorldConfigReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:WorldConfigReq_FieldNumber_LogSwitch];
  return GPBGetMessageRawEnumField(message, field);
}

void SetWorldConfigReq_LogSwitch_RawValue(WorldConfigReq *message, int32_t value) {
  GPBDescriptor *descriptor = [WorldConfigReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:WorldConfigReq_FieldNumber_LogSwitch];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - WorldResultDTOResp

@implementation WorldResultDTOResp

@dynamic code;
@dynamic msg;
@dynamic data_p;

typedef struct WorldResultDTOResp__storage_ {
  uint32_t _has_storage_[1];
  uint32_t code;
  NSString *msg;
  NSString *data_p;
} WorldResultDTOResp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "code",
        .dataTypeSpecific.clazz = Nil,
        .number = WorldResultDTOResp_FieldNumber_Code,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(WorldResultDTOResp__storage_, code),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "msg",
        .dataTypeSpecific.clazz = Nil,
        .number = WorldResultDTOResp_FieldNumber_Msg,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(WorldResultDTOResp__storage_, msg),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "data_p",
        .dataTypeSpecific.clazz = Nil,
        .number = WorldResultDTOResp_FieldNumber_Data_p,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(WorldResultDTOResp__storage_, data_p),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(WorldResultDTOResp)
                                   messageName:@"ResultDTOResp"
                               fileDescription:&WorldServiceRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(WorldResultDTOResp__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)

// clang-format on
